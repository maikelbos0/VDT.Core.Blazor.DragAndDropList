@page "/Style"

<h1>Style</h1>

<p>
    The only styles that get automatically applied to the list and its items are those that are needed to render the dragging and switching effects for the
    list items. Further styles can be applied either directly on the item layout template, or using below CSS classes.
</p>

<ul>
    <li><code>drag-and-drop-list</code> for the list container</li>
    <li><code>drag-and-drop-list-item</code> for each list item</li>
    <li><code>drag-and-drop-list-item-active</code> for the list item that is currently being dragged</li>
</ul>

<p>
    Below example uses a <code>box-shadow</code> to highlight the active item, and a <code>transition</code> on the <code>margin</code> properties to ease the
    shifting of items when dragging. Please note that because this example uses Blazor CSS isolation on a child component, the <code>::deep</code>
    pseudo-element is used and the list component must be inside an HTML element that the isolation attribute will be applied to. See the
    <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor/components/css-isolation">Microsoft documentation on Blazor CSS isolation </a> for more
    information.
</p>

<div>
    <DragAndDropList TItem="Item" Items="Items" OnDropItem="ItemDropped">
        <ItemTemplate>
            <div class="mt-3 p-3 bg-light border rounded d-flex justify-content-between align-items-center">
                <div class="overflow-hidden">
                    <h5 class="text-truncate">@context.Item.Text</h5>
                    <div class="text-muted text-truncate">@context.Item.Id</div>
                </div>
                <div>
                    <button class="btn btn-primary" @onmousedown="context.StartDragging" @ontouchstart="context.StartDragging">
                        <span>&varr;</span><span class="ps-2 d-none d-lg-inline">Move</span>
                    </button>
                </div>
            </div>
        </ItemTemplate>
    </DragAndDropList>
</div>

@code {
    private record Item(Guid Id, string Text);

    private List<Item> Items { get; set; } = Enumerable.Range(1, 8).Select(i => new Item(Guid.NewGuid(), $"Item {i}")).ToList();

    private void ItemDropped(DropItemEventArgs<Item> args) {
        Items.Reorder(args);
    }
}
